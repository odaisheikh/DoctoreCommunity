package com.codingdojo.doctors.models;

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Min;
import javax.validation.constraints.Size;

@Entity
@Table(name="users")
public class User {
 
 @Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 private Long id;
 @Size(min=3)
 private String username;
 @Min(18)
 private Integer age;
 @Size(min=3, message="E-mail must be atleast 3 characters")
 private String email;
 @Size(min=5)
 private String password;
 @Transient
 private String passwordConfirmation;
 @Column(updatable=false)
 private Date createdAt;
 private Date updatedAt;
 @PrePersist
 protected void onCreate(){
	 this.createdAt = new Date();
 }
 @PreUpdate
 protected void onUpdate(){
	 this.updatedAt = new Date();
 }
 
 @ManyToMany(fetch = FetchType.EAGER)
 @JoinTable(
     name = "users_roles", 
     joinColumns = @JoinColumn(name = "user_id"), 
     inverseJoinColumns = @JoinColumn(name = "role_id"))
 private List<Role> roles;
 
 @OneToMany(mappedBy="postUser", fetch = FetchType.LAZY)
 private List<Post> userPosts;
 
 
 @OneToMany(mappedBy="comUser", fetch = FetchType.LAZY)
 private List<Comment> userComments;
 
 
 @ManyToMany(fetch = FetchType.LAZY)
 @JoinTable(
     name = "users_comments", 
     joinColumns = @JoinColumn(name = "user_id"), 
     inverseJoinColumns = @JoinColumn(name = "comment_id")
 )
 private List<Comment> likedComments;
 
 @OneToMany(mappedBy="ratingUser", fetch = FetchType.LAZY)
 private List<Rating> userRatings;
 

	

 
}

